#include "Validation.h"
#include <iostream>
#include <string>
#include <ctype.h>
#include "../UI/CustomerUI/CustomerUI.h"
#include "../GlobalDefs/GlobalDefs.h"
#include <sstream>
#include "../Model/DB.h"
using namespace std;


bool Validation :: stringValidation(string name)
{
   int length = name.length();
   int flag =1;
   for(int i =0 ; i<length; i++)
        {
                if((name[i] >= 'a' && name[i] <= 'z') || (name[i] >= 'A' && name[i] <= 'Z') || (name[i] == ' ') )
                        continue;
                else
                {
                        flag = 0;
			break;
                }
       }
        if(flag == 0)
        {
                return false;
        }
        else
                return true;

}


/*
bool Validation :: CI(string s)
{
   int flag =1;
   long int v;
  (istringstream(s) >> v);
  if(v>111111 && v < 444444)
   {
    flag=1;
   }
  else
   {
   flag=0;
     
   }
 
   if(flag == 0)
        {
                return false;
        }
        else
                return true; 
                
}

*/

/*int Validation::validatePhoneNumber(string number,int& n)
{
for (int i = 0; i < number.length(); i++) 
 { 
   if (isdigit(number[i]))
      n=1; 
    return n; 
 } 
 CustomerUI::getCustomerMobileNumber(l_number); 
   return 3; 
}

int Validation::validateName(string name,int& n)
{
char ch[25];
strcpy(ch,name.c_str());
int length = name.size(); 

  for (int i = 0; i < length; i++) 
  { 
	if( isalpha(ch[i]))
	{
		 n =1; 
	}else
	{
		n=0;
		return n; 
	}
  }
 CustomerUI::getCustomerName(l_customername); 
  return 3; 
} 


*/

bool  Validation::mobileValidation(string number)
{
     
    long int number1;
    (istringstream(number) >> number1);
    int  flag=1;
    if(number1>7000000000 && number1<9999999999)
	{
		return true;
	}
	else
		return false;

}


bool  Validation::ageValidation(string number)
{
   
     int number1;
   (istringstream(number) >> number1);
      int  flag=1;
    if(number1>0 && number1<151)
        {
                return true;
        }
        else
	        return false;

     

}






bool  Validation::pincodeValidation(string number)
{

    long int number1;
    (istringstream(number) >> number1);
    int  flag=1;
    if(number1>100000 && number1<999999)
        {
                return true;
        }
        else
                return false;

}




bool Validation::panValidation(string pannumber)
{
   int length = pannumber.length();
   int flag =1;
   for(int i=0;i<5;i++)
   {
      if((pannumber[i] >= 'a' && pannumber[i] <= 'z') || (pannumber[i] >= 'A' && pannumber[i] <= 'Z') || (pannumber[i] == ' ') )
                        continue;
                else
                {
                        flag = 0;
                        break;
                }
    
   }
  for (int j=5;j<9;j++)
    {
      if((pannumber[j] >= 1 && pannumber[j] <= 9) ) 
	 continue;
      else
        {
           flag = 0;
           break; 
        } 
    } 

   
                if((pannumber[9] >= 'a' && pannumber[9] <= 'z') || (pannumber[9] >= 'A' && pannumber[9] <= 'Z') || (pannumber[9] == ' ') )
                  {
 		    cout<<BOLDMAGENTA;
                   
  	            flag=1;
                   }
                else
                {
                        flag = 0;
                        
                }

           if(length>10 || length < 10)
          {
            flag = 0; 
           }
          

if(flag == 0)
        {
                return false;
        }
        else
               return true;

}


bool Validation::accnoValidation(string accno)
{
    long int accno1;
   (istringstream(accno) >> accno1);
    int  flag=1;
   if(DB::checkAccno(accno1) == FAILED)
   {
    return FAILED;
   }
 if(accno1>100000 && accno1<999999)
   {
    return true;
   }
 else 
   {
   return false;
   }

}

bool Validation :: CI(string s)
{
   int flag =1;
   long int v;
  (istringstream(s) >> v);
  if(DB::checkCustomer(v) == FAILED)
   {
    return FAILED;
   }
   
 
 if(v>100000 && v<999999)
   {
    return true;
   }
 else
   {
   return false;
   }
 
 
}

